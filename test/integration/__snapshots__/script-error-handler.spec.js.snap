// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`scriptErrorHandler should apply custom func error handler: runtime.js 1`] = `
"Index: runtime.js
===================================================================
--- runtime.js	
+++ runtime.js	
@@ Change 1 @@
-/******/ 	  return Promise.reject(originalError);
+/******/ 	  return [
+/******/ 	    function(p1, p2, p3, p4) {
+/******/ 	      console.log(p3, p4);
+/******/ 	    }
+/******/ 	  ]
+/******/ 	    .reduce(function(promise, strategy) {
+/******/ 	      return promise.then(function(result) {
+/******/ 	        return strategy(installedChunks, chunkId, originalError, result);
+/******/ 	      });
+/******/ 	    }, Promise.resolve(originalError))
+/******/ 	    .then(function(result) {
+/******/ 	      return result ? Promise.reject(result) : Promise.resolve();
+/******/ 	    });
"
`;

exports[`scriptErrorHandler should apply custom plain error handler: runtime.js 1`] = `
"Index: runtime.js
===================================================================
--- runtime.js	
+++ runtime.js	
@@ Change 1 @@
-/******/ 	  return Promise.reject(originalError);
+/******/ 	  return [
+/******/ 	    function(installedChunks, chunkId, originalError, result) {
+/******/ 	      console.log(originalError, result);
+/******/ 	    }
+/******/ 	  ]
+/******/ 	    .reduce(function(promise, strategy) {
+/******/ 	      return promise.then(function(result) {
+/******/ 	        return strategy(installedChunks, chunkId, originalError, result);
+/******/ 	      });
+/******/ 	    }, Promise.resolve(originalError))
+/******/ 	    .then(function(result) {
+/******/ 	      return result ? Promise.reject(result) : Promise.resolve();
+/******/ 	    });
"
`;

exports[`scriptErrorHandler should apply multy error handlers: runtime.js 1`] = `
"Index: runtime.js
===================================================================
--- runtime.js	
+++ runtime.js	
@@ Change 1 @@
-/******/ 	  return Promise.reject(originalError);
+/******/ 	  return [
+/******/ 	    function(installedChunks, chunkId, originalError, result) {
+/******/ 	      console.log(originalError, result);
+/******/ 	    },
+/******/ 	    function(p1, p2, p3, p4) {
+/******/ 	      console.log(p3, p4);
+/******/ 	    }
+/******/ 	  ]
+/******/ 	    .reduce(function(promise, strategy) {
+/******/ 	      return promise.then(function(result) {
+/******/ 	        return strategy(installedChunks, chunkId, originalError, result);
+/******/ 	      });
+/******/ 	    }, Promise.resolve(originalError))
+/******/ 	    .then(function(result) {
+/******/ 	      return result ? Promise.reject(result) : Promise.resolve();
+/******/ 	    });
"
`;
