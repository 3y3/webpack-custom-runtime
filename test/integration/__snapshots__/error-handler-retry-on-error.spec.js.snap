// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RetryOnError should configure retry: runtime.js 1`] = `
"Index: runtime.js
===================================================================
--- runtime.js	
+++ runtime.js	
@@ Change 1 @@
-/******/ 	  return Promise.reject(originalError);
+/******/ 	  return [
+/******/ 	    function(installedChunks, chunkId, originalError, result) {
+/******/ 	      var retries = RetryOnError.cache[chunkId] || 0;
+/******/
+/******/ 	      if (retries >= RetryOnError.max) {
+/******/ 	        return result;
+/******/ 	      }
+/******/
+/******/ 	      RetryOnError.cache[chunkId] = retries + 1;
+/******/
+/******/ 	      return __webpack_require__.e(chunkId).then(function() {});
+/******/ 	    }
+/******/ 	  ]
+/******/ 	    .reduce(function(promise, strategy) {
+/******/ 	      return promise.then(function(result) {
+/******/ 	        return strategy(installedChunks, chunkId, originalError, result);
+/******/ 	      });
+/******/ 	    }, Promise.resolve(originalError))
+/******/ 	    .then(function(result) {
+/******/ 	      return result ? Promise.reject(result) : Promise.resolve();
+/******/ 	    });
@@ Change 2 @@
+/******/ 	var RetryOnError = { max: (2 || 1), cache: {} };
"
`;

exports[`RetryOnError should setup default retry: runtime.js 1`] = `
"Index: runtime.js
===================================================================
--- runtime.js	
+++ runtime.js	
@@ Change 1 @@
-/******/ 	  return Promise.reject(originalError);
+/******/ 	  return [
+/******/ 	    function(installedChunks, chunkId, originalError, result) {
+/******/ 	      var retries = RetryOnError.cache[chunkId] || 0;
+/******/
+/******/ 	      if (retries >= RetryOnError.max) {
+/******/ 	        return result;
+/******/ 	      }
+/******/
+/******/ 	      RetryOnError.cache[chunkId] = retries + 1;
+/******/
+/******/ 	      return __webpack_require__.e(chunkId).then(function() {});
+/******/ 	    }
+/******/ 	  ]
+/******/ 	    .reduce(function(promise, strategy) {
+/******/ 	      return promise.then(function(result) {
+/******/ 	        return strategy(installedChunks, chunkId, originalError, result);
+/******/ 	      });
+/******/ 	    }, Promise.resolve(originalError))
+/******/ 	    .then(function(result) {
+/******/ 	      return result ? Promise.reject(result) : Promise.resolve();
+/******/ 	    });
@@ Change 2 @@
+/******/ 	var RetryOnError = { max: (1 || 1), cache: {} };
"
`;
