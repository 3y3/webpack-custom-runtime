// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`require-ensure override should implement default webpack behavior: 0.js 1`] = `
"Index: 0.js
===================================================================
--- 0.js	
+++ 0.js	
"
`;

exports[`require-ensure override should implement default webpack behavior: 1.js 1`] = `
"Index: 1.js
===================================================================
--- 1.js	
+++ 1.js	
"
`;

exports[`require-ensure override should implement default webpack behavior: main-module.js 1`] = `
"Index: main-module.js
===================================================================
--- main-module.js	
+++ main-module.js	
"
`;

exports[`require-ensure override should implement default webpack behavior: other-module.js 1`] = `
"Index: other-module.js
===================================================================
--- other-module.js	
+++ other-module.js	
"
`;

exports[`require-ensure override should implement default webpack behavior: runtime.js 1`] = `
"Index: runtime.js
===================================================================
--- runtime.js	
+++ runtime.js	
@@ -69,0 +69,2 @@
+/******/ 	function scriptUrlResolver(installedChunks, chunkId) {
+/******/ 	  var result = (originalUrl = jsonpScriptSrc(chunkId));
@@ -70,0 +72,102 @@
+/******/ 	  return result;
+/******/ 	}
+/******/
+/******/ 	function scriptOptionsResolver(installedChunks, chunkId, url) {
+/******/ 	  var result = {};
+/******/
+/******/ 	  result.type = 'module';
+/******/ 	  result.timeout = 60;
+/******/ 	  if (__webpack_require__.nc) {
+/******/ 	    result.nonce = __webpack_require__.nc;
+/******/ 	  }
+/******/ 	  if (url.indexOf(window.location.origin + '/') !== 0) {
+/******/ 	    result.crossOrigin = 'anonymous';
+/******/ 	  }
+/******/
+/******/ 	  return result;
+/******/ 	}
+/******/
+/******/ 	function scriptBuilder(src, options, onSuccess, onError) {
+/******/ 	  var script, timeout;
+/******/
+/******/ 	  var onScriptComplete = function(error) {
+/******/ 	    onScriptComplete = function() {}; // avoid mem leaks in IE.
+/******/
+/******/ 	    script.onerror = script.onload = script.onreadystatechange = null;
+/******/ 	    clearTimeout(timeout);
+/******/ 	    error ? onError(error) : onSuccess();
+/******/ 	  };
+/******/
+/******/ 	  try {
+/******/ 	    options = extend(
+/******/ 	      {
+/******/ 	        // most compatible type
+/******/ 	        type: 'text/javascript',
+/******/ 	        charset: 'utf-8',
+/******/ 	        timeout: 20,
+/******/ 	        async: true
+/******/ 	      },
+/******/ 	      options
+/******/ 	    );
+/******/ 	    script = document.createElement('script');
+/******/ 	    extend(script, options);
+/******/
+/******/ 	    script.onload = function() {
+/******/ 	      onScriptComplete();
+/******/ 	    };
+/******/
+/******/ 	    timeout = setTimeout(function() {
+/******/ 	      onScriptComplete(error('timeout'));
+/******/ 	    }, options.timeout * 1000);
+/******/
+/******/ 	    script.onerror = function(event) {
+/******/ 	      onScriptComplete(
+/******/ 	        error(event && (event.type === 'load' ? 'missing' : event.type))
+/******/ 	      );
+/******/ 	    };
+/******/
+/******/ 	    script.onreadystatechange = function() {
+/******/ 	      // for compatibility with old IE
+/******/ 	      if (script.readyState === 'complete' || script.readyState === 'loaded') {
+/******/ 	        onScriptComplete(); // there is no way to catch loading errors in IE8
+/******/ 	      }
+/******/ 	    };
+/******/
+/******/ 	    script.src = src;
+/******/ 	  } catch (e) {
+/******/ 	    clearTimeout(timeout);
+/******/ 	    timeout = setTimeout(onScriptComplete, 0, error('script'));
+/******/ 	  }
+/******/
+/******/ 	  return script;
+/******/
+/******/ 	  function error(reason) {
+/******/ 	    var error = new Error('Failed to load resource');
+/******/ 	    error.type = reason;
+/******/ 	    return error;
+/******/ 	  }
+/******/
+/******/ 	  function extend(acc, src) {
+/******/ 	    if (src) {
+/******/ 	      for (var key in src) {
+/******/ 	        if (src.hasOwnProperty(key)) {
+/******/ 	          acc[key] = src[key];
+/******/ 	        }
+/******/ 	      }
+/******/ 	    }
+/******/
+/******/ 	    return acc;
+/******/ 	  }
+/******/ 	}
+/******/
+/******/ 	function scriptLoadHandler(installedChunks, chunkId) {
+/******/ 	  var result = null;
+/******/
+/******/ 	  return Promise.resolve(result);
+/******/ 	}
+/******/
+/******/ 	function scriptErrorHandler(installedChunks, chunkId, originalError) {
+/******/ 	  return Promise.reject(originalError);
+/******/ 	}
+/******/
+/******/
@@ -118,1 +222,1 @@
-/******/
+/******/ 				script.type = \\"module\\";
@@ -120,1 +224,1 @@
-/******/ 				script.timeout = 120;
+/******/ 				script.timeout = 60;
@@ -125,1 +229,3 @@
-/******/
+/******/ 				if (script.src.indexOf(window.location.origin + '/') !== 0) {
+/******/ 					script.crossOrigin = \\"anonymous\\";
+/******/ 				}
@@ -148,1 +254,1 @@
-/******/ 				}, 120000);
+/******/ 				}, 60000);
@@ -153,0 +259,116 @@
+/******/
+/******/ 		var result = (function(
+/******/ 		  installedChunks,
+/******/ 		  chunkId,
+/******/ 		  scriptUrlResolver,
+/******/ 		  scriptOptionsResolver,
+/******/ 		  scriptBuilder,
+/******/ 		  scriptLoadHandler,
+/******/ 		  scriptErrorHandler
+/******/ 		) {
+/******/ 		  // JSONP chunk loading for javascript
+/******/ 		  var INSTALLED = 0;
+/******/ 		  var PROMISE_RESOLVE = 0;
+/******/ 		  var PROMISE_REJECT = 1;
+/******/ 		  var LOAD_PROMISE = 2;
+/******/ 		  var installedChunkData = installedChunks[chunkId];
+/******/
+/******/ 		  if (installedChunkData === INSTALLED || installedChunkData) {
+/******/ 		    return installedChunkData === INSTALLED
+/******/ 		      ? Promise.resolve()
+/******/ 		      : installedChunkData[LOAD_PROMISE];
+/******/ 		  }
+/******/
+/******/ 		  var url, options, script, error;
+/******/ 		  var currentStackError = new Error(); // create error before stack unwound to get useful stacktrace later
+/******/
+/******/ 		  installedChunkData = installedChunks[chunkId] = [];
+/******/ 		  installedChunkData[LOAD_PROMISE] = new Promise(function(resolve, reject) {
+/******/ 		    installedChunkData[PROMISE_RESOLVE] = resolve;
+/******/ 		    installedChunkData[PROMISE_REJECT] = reject;
+/******/ 		  })
+/******/ 		    .catch(setError)
+/******/ 		    .then(checkScriptLoaded)
+/******/ 		    .then(onLoad)
+/******/ 		    .catch(onError);
+/******/ 		  Promise.resolve()
+/******/ 		    .then(resolveUrlAndOptions)
+/******/ 		    .then(buildScript)
+/******/ 		    .then(setScript)
+/******/ 		    .then(appendScript)
+/******/ 		    .catch(installedChunkData[PROMISE_REJECT]);
+/******/ 		  return installedChunkData[LOAD_PROMISE];
+/******/
+/******/ 		  function checkScriptLoaded() {
+/******/ 		    var chunk = installedChunks[chunkId];
+/******/ 		    var isChunkComplete = chunk === INSTALLED; // ignore any errors if chunk is loaded
+/******/
+/******/ 		    if (isChunkComplete) {
+/******/ 		      return;
+/******/ 		    }
+/******/
+/******/ 		    installedChunks[chunkId] = null; // not 'undefined' for prevent useless prefetching
+/******/
+/******/ 		    error = error || currentStackError;
+/******/ 		    error.type = error.type || 'missing';
+/******/ 		    error.name = 'ChunkLoadError';
+/******/ 		    error.message =
+/******/ 		      'Loading chunk ' +
+/******/ 		      chunkId +
+/******/ 		      ' failed.\\\\n(' +
+/******/ 		      error.type +
+/******/ 		      ': ' +
+/******/ 		      script.src +
+/******/ 		      ')';
+/******/ 		    error.request = script.src; // Extra fields
+/******/
+/******/ 		    error.chunkId = chunkId;
+/******/ 		    throw error;
+/******/ 		  }
+/******/
+/******/ 		  function buildScript() {
+/******/ 		    // scriptBuilder can be asynchronous for old school strategies like \`blob loading\`
+/******/ 		    return scriptBuilder(
+/******/ 		      url,
+/******/ 		      options,
+/******/ 		      installedChunkData[PROMISE_RESOLVE],
+/******/ 		      installedChunkData[PROMISE_REJECT]
+/******/ 		    );
+/******/ 		  }
+/******/
+/******/ 		  function resolveUrlAndOptions() {
+/******/ 		    url = scriptUrlResolver(installedChunks, chunkId);
+/******/ 		    options = scriptOptionsResolver(installedChunks, chunkId, url);
+/******/ 		  }
+/******/
+/******/ 		  function appendScript() {
+/******/ 		    document.getElementsByTagName('head')[0].appendChild(script);
+/******/ 		  }
+/******/
+/******/ 		  function setError(_error) {
+/******/ 		    error = _error;
+/******/ 		  }
+/******/
+/******/ 		  function setScript(_script) {
+/******/ 		    script = _script;
+/******/ 		  }
+/******/
+/******/ 		  function onLoad() {
+/******/ 		    return scriptLoadHandler(installedChunks, chunkId);
+/******/ 		  }
+/******/
+/******/ 		  function onError(error) {
+/******/ 		    return scriptErrorHandler(installedChunks, chunkId, error);
+/******/ 		  }
+/******/ 		})(
+/******/ 		  installedChunks,
+/******/ 		  chunkId,
+/******/ 		  scriptUrlResolver,
+/******/ 		  scriptOptionsResolver,
+/******/ 		  scriptBuilder,
+/******/ 		  scriptLoadHandler,
+/******/ 		  scriptErrorHandler
+/******/ 		);
+/******/ 		if (result) {
+/******/ 		  promises.push.apply(promises, [].concat(result));
+/******/ 		}
"
`;

exports[`require-ensure override should skip defaults on custom behavior: 0.js 1`] = `
"Index: 0.js
===================================================================
--- 0.js	
+++ 0.js	
"
`;

exports[`require-ensure override should skip defaults on custom behavior: 1.js 1`] = `
"Index: 1.js
===================================================================
--- 1.js	
+++ 1.js	
"
`;

exports[`require-ensure override should skip defaults on custom behavior: main-module.js 1`] = `
"Index: main-module.js
===================================================================
--- main-module.js	
+++ main-module.js	
"
`;

exports[`require-ensure override should skip defaults on custom behavior: other-module.js 1`] = `
"Index: other-module.js
===================================================================
--- other-module.js	
+++ other-module.js	
"
`;

exports[`require-ensure override should skip defaults on custom behavior: runtime.js 1`] = `
"Index: runtime.js
===================================================================
--- runtime.js	
+++ runtime.js	
@@ -69,0 +69,2 @@
+/******/ 	function scriptUrlResolver(installedChunks, chunkId) {
+/******/ 	  var result = (originalUrl = jsonpScriptSrc(chunkId));
@@ -70,0 +72,93 @@
+/******/ 	  return result;
+/******/ 	}
+/******/
+/******/ 	function scriptOptionsResolver(installedChunks, chunkId, url) {
+/******/ 	  var result = {};
+/******/
+/******/ 	  return result;
+/******/ 	}
+/******/
+/******/ 	function scriptBuilder(src, options, onSuccess, onError) {
+/******/ 	  var script, timeout;
+/******/
+/******/ 	  var onScriptComplete = function(error) {
+/******/ 	    onScriptComplete = function() {}; // avoid mem leaks in IE.
+/******/
+/******/ 	    script.onerror = script.onload = script.onreadystatechange = null;
+/******/ 	    clearTimeout(timeout);
+/******/ 	    error ? onError(error) : onSuccess();
+/******/ 	  };
+/******/
+/******/ 	  try {
+/******/ 	    options = extend(
+/******/ 	      {
+/******/ 	        // most compatible type
+/******/ 	        type: 'text/javascript',
+/******/ 	        charset: 'utf-8',
+/******/ 	        timeout: 20,
+/******/ 	        async: true
+/******/ 	      },
+/******/ 	      options
+/******/ 	    );
+/******/ 	    script = document.createElement('script');
+/******/ 	    extend(script, options);
+/******/
+/******/ 	    script.onload = function() {
+/******/ 	      onScriptComplete();
+/******/ 	    };
+/******/
+/******/ 	    timeout = setTimeout(function() {
+/******/ 	      onScriptComplete(error('timeout'));
+/******/ 	    }, options.timeout * 1000);
+/******/
+/******/ 	    script.onerror = function(event) {
+/******/ 	      onScriptComplete(
+/******/ 	        error(event && (event.type === 'load' ? 'missing' : event.type))
+/******/ 	      );
+/******/ 	    };
+/******/
+/******/ 	    script.onreadystatechange = function() {
+/******/ 	      // for compatibility with old IE
+/******/ 	      if (script.readyState === 'complete' || script.readyState === 'loaded') {
+/******/ 	        onScriptComplete(); // there is no way to catch loading errors in IE8
+/******/ 	      }
+/******/ 	    };
+/******/
+/******/ 	    script.src = src;
+/******/ 	  } catch (e) {
+/******/ 	    clearTimeout(timeout);
+/******/ 	    timeout = setTimeout(onScriptComplete, 0, error('script'));
+/******/ 	  }
+/******/
+/******/ 	  return script;
+/******/
+/******/ 	  function error(reason) {
+/******/ 	    var error = new Error('Failed to load resource');
+/******/ 	    error.type = reason;
+/******/ 	    return error;
+/******/ 	  }
+/******/
+/******/ 	  function extend(acc, src) {
+/******/ 	    if (src) {
+/******/ 	      for (var key in src) {
+/******/ 	        if (src.hasOwnProperty(key)) {
+/******/ 	          acc[key] = src[key];
+/******/ 	        }
+/******/ 	      }
+/******/ 	    }
+/******/
+/******/ 	    return acc;
+/******/ 	  }
+/******/ 	}
+/******/
+/******/ 	function scriptLoadHandler(installedChunks, chunkId) {
+/******/ 	  var result = null;
+/******/
+/******/ 	  return Promise.resolve(result);
+/******/ 	}
+/******/
+/******/ 	function scriptErrorHandler(installedChunks, chunkId, originalError) {
+/******/ 	  return Promise.reject(originalError);
+/******/ 	}
+/******/
+/******/
@@ -153,0 +248,116 @@
+/******/
+/******/ 		var result = (function(
+/******/ 		  installedChunks,
+/******/ 		  chunkId,
+/******/ 		  scriptUrlResolver,
+/******/ 		  scriptOptionsResolver,
+/******/ 		  scriptBuilder,
+/******/ 		  scriptLoadHandler,
+/******/ 		  scriptErrorHandler
+/******/ 		) {
+/******/ 		  // JSONP chunk loading for javascript
+/******/ 		  var INSTALLED = 0;
+/******/ 		  var PROMISE_RESOLVE = 0;
+/******/ 		  var PROMISE_REJECT = 1;
+/******/ 		  var LOAD_PROMISE = 2;
+/******/ 		  var installedChunkData = installedChunks[chunkId];
+/******/
+/******/ 		  if (installedChunkData === INSTALLED || installedChunkData) {
+/******/ 		    return installedChunkData === INSTALLED
+/******/ 		      ? Promise.resolve()
+/******/ 		      : installedChunkData[LOAD_PROMISE];
+/******/ 		  }
+/******/
+/******/ 		  var url, options, script, error;
+/******/ 		  var currentStackError = new Error(); // create error before stack unwound to get useful stacktrace later
+/******/
+/******/ 		  installedChunkData = installedChunks[chunkId] = [];
+/******/ 		  installedChunkData[LOAD_PROMISE] = new Promise(function(resolve, reject) {
+/******/ 		    installedChunkData[PROMISE_RESOLVE] = resolve;
+/******/ 		    installedChunkData[PROMISE_REJECT] = reject;
+/******/ 		  })
+/******/ 		    .catch(setError)
+/******/ 		    .then(checkScriptLoaded)
+/******/ 		    .then(onLoad)
+/******/ 		    .catch(onError);
+/******/ 		  Promise.resolve()
+/******/ 		    .then(resolveUrlAndOptions)
+/******/ 		    .then(buildScript)
+/******/ 		    .then(setScript)
+/******/ 		    .then(appendScript)
+/******/ 		    .catch(installedChunkData[PROMISE_REJECT]);
+/******/ 		  return installedChunkData[LOAD_PROMISE];
+/******/
+/******/ 		  function checkScriptLoaded() {
+/******/ 		    var chunk = installedChunks[chunkId];
+/******/ 		    var isChunkComplete = chunk === INSTALLED; // ignore any errors if chunk is loaded
+/******/
+/******/ 		    if (isChunkComplete) {
+/******/ 		      return;
+/******/ 		    }
+/******/
+/******/ 		    installedChunks[chunkId] = null; // not 'undefined' for prevent useless prefetching
+/******/
+/******/ 		    error = error || currentStackError;
+/******/ 		    error.type = error.type || 'missing';
+/******/ 		    error.name = 'ChunkLoadError';
+/******/ 		    error.message =
+/******/ 		      'Loading chunk ' +
+/******/ 		      chunkId +
+/******/ 		      ' failed.\\\\n(' +
+/******/ 		      error.type +
+/******/ 		      ': ' +
+/******/ 		      script.src +
+/******/ 		      ')';
+/******/ 		    error.request = script.src; // Extra fields
+/******/
+/******/ 		    error.chunkId = chunkId;
+/******/ 		    throw error;
+/******/ 		  }
+/******/
+/******/ 		  function buildScript() {
+/******/ 		    // scriptBuilder can be asynchronous for old school strategies like \`blob loading\`
+/******/ 		    return scriptBuilder(
+/******/ 		      url,
+/******/ 		      options,
+/******/ 		      installedChunkData[PROMISE_RESOLVE],
+/******/ 		      installedChunkData[PROMISE_REJECT]
+/******/ 		    );
+/******/ 		  }
+/******/
+/******/ 		  function resolveUrlAndOptions() {
+/******/ 		    url = scriptUrlResolver(installedChunks, chunkId);
+/******/ 		    options = scriptOptionsResolver(installedChunks, chunkId, url);
+/******/ 		  }
+/******/
+/******/ 		  function appendScript() {
+/******/ 		    document.getElementsByTagName('head')[0].appendChild(script);
+/******/ 		  }
+/******/
+/******/ 		  function setError(_error) {
+/******/ 		    error = _error;
+/******/ 		  }
+/******/
+/******/ 		  function setScript(_script) {
+/******/ 		    script = _script;
+/******/ 		  }
+/******/
+/******/ 		  function onLoad() {
+/******/ 		    return scriptLoadHandler(installedChunks, chunkId);
+/******/ 		  }
+/******/
+/******/ 		  function onError(error) {
+/******/ 		    return scriptErrorHandler(installedChunks, chunkId, error);
+/******/ 		  }
+/******/ 		})(
+/******/ 		  installedChunks,
+/******/ 		  chunkId,
+/******/ 		  scriptUrlResolver,
+/******/ 		  scriptOptionsResolver,
+/******/ 		  scriptBuilder,
+/******/ 		  scriptLoadHandler,
+/******/ 		  scriptErrorHandler
+/******/ 		);
+/******/ 		if (result) {
+/******/ 		  promises.push.apply(promises, [].concat(result));
+/******/ 		}
"
`;
